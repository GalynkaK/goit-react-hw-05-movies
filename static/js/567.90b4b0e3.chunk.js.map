{"version":3,"file":"static/js/567.90b4b0e3.chunk.js","mappings":"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","sources":["Pages/Movies/Movies.jsx","webpack://react-homework-template/./src/components/Paginator/Paginator.module.css?d053","components/Paginator/Paginator.jsx","components/Service/Api.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { searchMovie } from 'components/Service/Api';\nimport Paginator from 'components/Paginator/Paginator';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = Number(searchParams.get('page')) || 1;\n  const query = searchParams.get('query') || '';\n\n  const [inputValue, setInputValue] = useState(query);\n\n  useEffect(() => {\n    if (!query) return;\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const { results, total_pages } = await searchMovie(query, page);\n        setMovies(results);\n        setError(null);\n        setTotalPages(total_pages || 0);\n        setCurrentPage(page - 1);\n      } catch (error) {\n        setError('An error occurred. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n  }, [query, page]);\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const searchQuery = e.target.elements.search.value.trim();\n    if (searchQuery === '') {\n      e.target.reset();\n      return;\n    }\n    const newSearchParams = new URLSearchParams();\n    newSearchParams.set('query', searchQuery);\n    newSearchParams.set('page', 1);\n    window.location.search = newSearchParams.toString();\n    e.target.reset();\n  };\n\n  const handlePageChange = (selectedPage) => {\n    const newSearchParams = new URLSearchParams();\n    newSearchParams.set('query', query);\n    newSearchParams.set('page', String(selectedPage + 1));\n    window.location.search = newSearchParams.toString();\n  };\n\n  return (\n    <>\n      <div>\n        <h2>Search movies:</h2>\n        <form onSubmit={handleSubmit}>\n          <input\n            value={inputValue}\n            onChange={handleChange}\n            name=\"search\"\n            type=\"text\"\n            placeholder=\"Type here\"\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n      </div>\n      <ul>\n        {loading ? (\n          <div>\n            <MagnifyingGlass visible={true} height={80} width={80} />\n          </div>\n        ) : movies.length > 0 ? (\n          movies.map(({ title, id, poster_path }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`}>\n                {title}\n                {poster_path && <img src={`https://image.tmdb.org/t/p/w200${poster_path}`} alt={title} />}\n              </Link>\n            </li>\n          ))\n        ) : (\n          <p>\n            {error\n              ? error\n              : 'No movies with this title were found. Try entering another title.'}\n          </p>\n        )}\n      </ul>\n      <Paginator\n        totalPages={totalPages}\n        setSearchParams={handlePageChange}\n        params={{ query, page }}\n        currentPage={currentPage}\n      />\n    </>\n  );\n};\n\nexport default Movies;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Paginator_container__F4trY\",\"selected\":\"Paginator_selected__vwJOK\",\"pagination-button\":\"Paginator_pagination-button__6KJNt\"};","import ReactPaginate from 'react-paginate';\nimport PropTypes from 'prop-types';\nimport css from './Paginator.module.css';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\n\nfunction Paginator({ totalPages, setSearchParams, params, currentPage }) {\n  const handlePageClick = (e) => {\n    setSearchParams({ ...params, page: e.selected + 1 });\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <ReactPaginate\n          breakLabel=\"...\"\n          previousLabel={<IoIosArrowBack />}\n          nextLabel={<IoIosArrowForward />}\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={4}\n          marginPagesDisplayed={2}\n          pageCount={totalPages - 1}\n          renderOnZeroPageCount={null}\n          forcePage={currentPage}\n          containerClassName={css.container}\n          activeClassName={css.selected}\n          pageClassName={css['pagination-button']}\n          breakClassName={css.break}\n          previousClassName={css.previous}\n          nextClassName={css.next}\n          disabledClassName={css.disabled}\n        />\n      </div>\n    </>\n  );\n}\n\nPaginator.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  setSearchParams: PropTypes.func.isRequired,\n  params: PropTypes.object.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\n\nexport default Paginator;","import axios from 'axios';\n\nconst apiKey = '7c406e0461b4f259f1eed9475dcfb501';\nconst baseUrl = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: baseUrl,\n  params: {\n    api_key: apiKey,\n    language: 'en-US',\n  },\n});\n\nexport const getTrendingMovies = async (page) => {\n  const request = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(request, {\n      params: {\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async (id) => {\n  const request = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(request);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async (id) => {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async (id) => {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovie = async (requestString, page) => {\n  const request = `/search/movie`;\n  try {\n    const { data } = await instance.get(request, {\n      params: {\n        query: requestString,\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};"],"names":["useState","movies","setMovies","loading","setLoading","error","setError","totalPages","setTotalPages","currentPage","setCurrentPage","location","useLocation","searchParams","URLSearchParams","search","page","Number","get","query","inputValue","setInputValue","useEffect","getData","searchMovie","results","total_pages","onSubmit","e","preventDefault","searchQuery","target","elements","value","trim","newSearchParams","set","window","toString","reset","onChange","name","type","placeholder","visible","height","width","length","map","title","id","poster_path","to","src","alt","setSearchParams","selectedPage","String","params","className","breakLabel","previousLabel","nextLabel","onPageChange","selected","pageRangeDisplayed","marginPagesDisplayed","pageCount","renderOnZeroPageCount","forcePage","containerClassName","css","activeClassName","pageClassName","breakClassName","previousClassName","nextClassName","disabledClassName","instance","axios","baseURL","api_key","language","getTrendingMovies","data","getMovieDetails","request","getMovieCast","getMovieReviews","requestString"],"sourceRoot":""}